static String getSysProp(String value, String fallback) {
    // This is required as there is a length limitation on System.properties.getProperty(a,b)

    if (!System.properties.containsKey(value)) {
        return fallback
    }

    return System.properties.get(value)
}

import java.nio.file.Paths

apply plugin: 'java'
apply plugin: 'idea'

String gitVersion() {
    ByteArrayOutputStream out = new ByteArrayOutputStream()
    exec {
        commandLine = [ 'git', 'describe', '--always', '--dirty' ]
        standardOutput = out
    }
    return out.toString().replace(System.lineSeparator(), '')
}

version = gitVersion()

evaluationDependsOnChildren()

def binDir = 'bin'
def distDir = 'dist'
def iconDir = 'icons'
def imgDir = 'img'
def libDir = 'lib'
def buildPath = Paths.get(getSysProp('client.build.bin', project.buildDir.toPath().resolve(binDir).toString()))
def distPath = Paths.get(getSysProp('client.build.dist', project.buildDir.toPath().resolve(distDir).toString()))

def buildCommonPath = buildPath.resolve('common')
def buildLinuxPath = buildPath.resolve('linux')
def buildWinPath = buildPath.resolve('win')

def winExecPath = project.buildDir.toPath().resolve('launch4j').resolve('hyperbox.exe')

String getPackageName(String os) {
    return "hbox-client-${project.version}-${os}_x64"
}

/-------------------- Binaries build and assembly tasks ------------------------------/

task binJar(type: Copy) {
    dependsOn subprojects.jar

    from project('hbox-client-gui').jar
    from project('hbox-client-core').jar
    into buildCommonPath.resolve(binDir)
}

task binLib(type: Copy) {
    from subprojects.configurations.compile
    into buildCommonPath.resolve(libDir)
}

task binIcons(type: Copy) {
    from project('hbox-client-gui').file(iconDir)
    from project('hbox-client-gui').file(imgDir)
    into buildCommonPath.resolve(iconDir)
}

task binCommon {
    dependsOn binJar, binLib, binIcons

    doLast {
        mkdir "${buildCommonPath}/doc"
        mkdir "${buildCommonPath}/modules"
    }
}

task binLinux(type: Copy) {
    dependsOn binCommon

    from project.file('scripts/hyperbox')
    from project.file('modules/gui/hyperbox-client.desktop')
    from project.file('scripts/installer/client-installer.sh')
    from buildCommonPath.toString() // using a Path creates a Stack Overflow
    into buildLinuxPath
}

task binWinExec(type: Exec) {
    dependsOn binCommon

    def launch4jXml = project.buildDir.toPath().resolve('launch4j').resolve('hyperbox.xml')

    doFirst {
        copy {
            from project.file('scripts/launch4j/hyperbox.xml')
            into project.buildDir.toPath().resolve('launch4j')
        }

        ant.replace(
                file: launch4jXml,
                token: '@LAUNCH4J_OUT_FILE@',
                value: winExecPath
        )

        ant.replace(
                file: launch4jXml,
                token: '@LAUNCH4J_JAR@',
                value: "${binDir}/${project('hbox-client-core').jar.archiveName}"
        )
    }

    commandLine '/opt/launch4j/launch4j', launch4jXml
}

task binWin(type: Copy) {
    dependsOn binWinExec

    from buildCommonPath.toString() // using a Path creates a Stack Overflow
    from winExecPath.toFile()
    into buildWinPath.toFile()
}

task bin {
    dependsOn binLinux, binWin
}

/-------- End of Binaries build and assembly --------/

/-------- Distribution build tasks -----------------/

task distLinuxZip(type: Zip) {
    dependsOn binLinux

    archiveName = "${getPackageName('linux')}.zip"
    destinationDir = distPath.toFile()

    from buildLinuxPath.toFile()
}

task distLinuxInstall(type: Exec) {
    dependsOn binLinux

    doFirst {
        mkdir distPath
    }

    commandLine(
            'makeself',
            buildLinuxPath,
            "${distPath}/${getPackageName('linux')}.run",
            'Hyperbox Client',
            './client-installer.sh'
    )
}

task distLinux {
    dependsOn distLinuxZip, distLinuxInstall
}

task distWinZip(type: Zip) {
    dependsOn binWin

    archiveName = "${getPackageName('win')}.zip"
    destinationDir = distPath.toFile()

    from buildWinPath.toFile()
}

task distWinInstall(type: Exec) {
    dependsOn binWin

    doFirst {
        mkdir distPath

        copy {
            from project.file('scripts/installer/client-installer.nsi')
            into "${project.buildDir}"
        }

        ant.replace(
                file: "${project.buildDir}/client-installer.nsi",
                token: '@CLIENT_INSTALLER_OUTPUT@',
                value: "${distPath}/${getPackageName('win')}.exe"
        )

        ant.replace(
                file: "${project.buildDir}/client-installer.nsi",
                token: '@CLIENT_OUT_BIN_DIR@',
                value: "${buildWinPath}"
        )

        ant.replace(
                file: "${project.buildDir}/client-installer.nsi",
                token: '@CLIENT_INSTALL_DIR@',
                value: "C:\\Program Files\\Hyperbox\\Client"
        )
    }

    commandLine 'makensis', '-DPROJECT_NAME=Hyperbox Client', '-V2', "${project.buildDir}/client-installer.nsi"
}

task distWin {
    dependsOn distWinZip, distWinInstall
}

task distAll {
    dependsOn distLinux, distWin
}
